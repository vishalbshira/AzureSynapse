{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "synapseworkspace1993"
		},
		"synapseworkspace1993-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'synapseworkspace1993-WorkspaceDefaultSqlServer'"
		},
		"nyc_tlc_yellow_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'nyc_tlc_yellow'"
		},
		"synapseworkspace1993-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://datalake1993.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/nyc_tlc_yellow')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('nyc_tlc_yellow_sasUri')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapseworkspace1993-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('synapseworkspace1993-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapseworkspace1993-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('synapseworkspace1993-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Explore_NYC_Taxi_data')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "NYC Taxi"
				},
				"content": {
					"query": "/*\nThis query shows how the total trip distances and average trip distance relate to the number of passengers.\n*/\n\nSELECT PassengerCount,\n      SUM(TripDistanceMiles) as SumTripDistance,\n      AVG(TripDistanceMiles) as AvgTripDistance\nFROM  dbo.Trip\nWHERE TripDistanceMiles > 0 AND PassengerCount > 0\nGROUP BY PassengerCount\nORDER BY PassengerCount",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "sqlpool1",
						"databaseName": "sqlpool1"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Load the NYC Taxi Data')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "NYC Taxi"
				},
				"content": {
					"query": "/*\nThis script will finish in around 60 seconds. It loads 2 million rows of NYC Taxi data into a table called dbo.Trip\n*/\nCREATE TABLE [dbo].[Trip]\n(\n    [DateID] int NOT NULL,\n    [MedallionID] int NOT NULL,\n    [HackneyLicenseID] int NOT NULL,\n    [PickupTimeID] int NOT NULL,\n    [DropoffTimeID] int NOT NULL,\n    [PickupGeographyID] int NULL,\n    [DropoffGeographyID] int NULL,\n    [PickupLatitude] float NULL,\n    [PickupLongitude] float NULL,\n    [PickupLatLong] varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\n    [DropoffLatitude] float NULL,\n    [DropoffLongitude] float NULL,\n    [DropoffLatLong] varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\n    [PassengerCount] int NULL,\n    [TripDurationSeconds] int NULL,\n    [TripDistanceMiles] float NULL,\n    [PaymentType] varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\n    [FareAmount] money NULL,\n    [SurchargeAmount] money NULL,\n    [TaxAmount] money NULL,\n    [TipAmount] money NULL,\n    [TollsAmount] money NULL,\n    [TotalAmount] money NULL\n)\nWITH\n(\n    DISTRIBUTION = ROUND_ROBIN,\n    CLUSTERED COLUMNSTORE INDEX\n);\n\nCOPY INTO [dbo].[Trip]\nFROM 'https://nytaxiblob.blob.core.windows.net/2013/Trip2013/QID6392_20171107_05910_0.txt.gz'\nWITH\n(\n    FILE_TYPE = 'CSV',\n    FIELDTERMINATOR = '|',\n    FIELDQUOTE = '',\n    ROWTERMINATOR='0X0A',\n    COMPRESSION = 'GZIP'\n)\nOPTION (LABEL = 'COPY : Load [dbo].[Trip] - Taxi dataset');",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "sqlpool1",
						"databaseName": "sqlpool1"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) [DateID]\n,[MedallionID]\n,[HackneyLicenseID]\n,[PickupTimeID]\n,[DropoffTimeID]\n,[PickupGeographyID]\n,[DropoffGeographyID]\n,[PickupLatitude]\n,[PickupLongitude]\n,[PickupLatLong]\n,[DropoffLatitude]\n,[DropoffLongitude]\n,[DropoffLatLong]\n,[PassengerCount]\n,[TripDurationSeconds]\n,[TripDistanceMiles]\n,[PaymentType]\n,[FareAmount]\n,[SurchargeAmount]\n,[TaxAmount]\n,[TipAmount]\n,[TollsAmount]\n,[TotalAmount]\n FROM [dbo].[Trip]\n\n select count(*) from dbo.trip;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "sqlpool1",
						"databaseName": "sqlpool1"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Serverless_SQ_Analyse')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- Create Database\nCREATE DATABASE mydbname\n\n-- Create data source\n-- create master key that will protect the credentials:\nCREATE MASTER KEY ENCRYPTION BY PASSWORD = 'sknfd#isfnasdkf!bsk1'\n\n-- create credentials for containers in our demo storage account\nCREATE DATABASE SCOPED CREDENTIAL sqlondemand\nWITH IDENTITY='SHARED ACCESS SIGNATURE',  \nSECRET = 'sv=2018-03-28&ss=bf&srt=sco&sp=rl&st=2019-10-14T12%3A10%3A25Z&se=2061-12-31T12%3A10%3A00Z&sig=KlSU2ullCscyTS0An0nozEpo4tO5JAgGBvw%2FJX2lguw%3D'\nGO\nCREATE EXTERNAL DATA SOURCE SqlOnDemandDemo WITH (\n    LOCATION = 'https://sqlondemandstorage.blob.core.windows.net',\n    CREDENTIAL = sqlondemand\n);\n\n\n-- Query CSV files\nSELECT TOP 10 *\nFROM OPENROWSET\n  (\n      BULK 'csv/population/*.csv',\n      DATA_SOURCE = 'SqlOnDemandDemo',\n      FORMAT = 'CSV', PARSER_VERSION = '2.0'\n  )\nWITH\n  (\n      country_code VARCHAR (5)\n    , country_name VARCHAR (100)\n    , year smallint\n    , population bigint\n  ) AS r\nWHERE\n  country_name = 'Luxembourg' AND year = 2017\n\n\n-- Query Parquet files\nSELECT COUNT_BIG(*)\nFROM OPENROWSET\n  (\n      BULK 'parquet/taxi/year=2017/month=9/*.parquet',\n      DATA_SOURCE = 'SqlOnDemandDemo',\n      FORMAT='PARQUET'\n  ) AS nyc\n\n\n-- JSON FILE\n/*\n{  \n   \"_id\":\"ahokw88\",\n   \"type\":\"Book\",\n   \"title\":\"The AWK Programming Language\",\n   \"year\":\"1988\",\n   \"publisher\":\"Addison-Wesley\",\n   \"authors\":[  \n      \"Alfred V. Aho\",\n      \"Brian W. Kernighan\",\n      \"Peter J. Weinberger\"\n   ],\n   \"source\":\"DBLP\"\n}\n*/\n\n-- Query JSON files\nSELECT TOP 10 \n    JSON_VALUE(jsonContent, '$.title') AS title\n  , JSON_VALUE(jsonContent, '$.publisher') as publisher\n  , jsonContent\nFROM OPENROWSET\n  (\n      BULK 'json/books/*.json',\n      DATA_SOURCE = 'SqlOnDemandDemo'\n    , FORMAT='CSV'\n    , FIELDTERMINATOR ='0x0b'\n    , FIELDQUOTE = '0x0b'\n    , ROWTERMINATOR = '0x0b'\n  )\nWITH\n  ( jsonContent varchar(8000) ) AS [r]\nWHERE\n  JSON_VALUE(jsonContent, '$.title') = 'Probabilistic and Statistical Methods in Cryptology, An Introduction by Selected Topics'\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "Built-in",
						"databaseName": "mydbname"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/create table')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE TABLE [dbo].[Table]\n(\n    col1 int NOT NULL\n)\nWITH\n(\n    DISTRIBUTION = HASH (col1),\n    CLUSTERED COLUMNSTORE INDEX\n)\nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "sqlpool1",
						"databaseName": "sqlpool1"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Analyze NYC Taxi with Apache Spark')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"bigDataPool": {
					"referenceName": "sparkpool1",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/6b067052-a87f-420c-a12f-4fc8bf8d00bb/resourceGroups/rg-synapse/providers/Microsoft.Synapse/workspaces/synapseworkspace1993/bigDataPools/sparkpool1",
						"name": "sparkpool1",
						"type": "Spark",
						"endpoint": "https://synapseworkspace1993.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool1",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					}
				},
				"cells": [
					{
						"cell_type": "markdown",
						"source": [
							"## Load the NYC Taxi data into the Spark nyctaxi database\n",
							""
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "scala"
							}
						},
						"source": [
							"%%spark\n",
							"spark.sql(\"CREATE DATABASE IF NOT EXISTS nyctaxi\")\n",
							"val df = spark.read.sqlanalytics(\"SQLPOOL1.dbo.Trip\") \n",
							"df.write.mode(\"overwrite\").saveAsTable(\"nyctaxi.trip\")"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Analyze the NYC Taxi data using Spark and notebooks\n",
							""
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\n",
							"df = spark.sql(\"SELECT * FROM nyctaxi.trip\") \n",
							"display(df)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\n",
							"df = spark.sql(\"\"\"\n",
							"   SELECT PassengerCount,\n",
							"       SUM(TripDistanceMiles) as SumTripDistance,\n",
							"       AVG(TripDistanceMiles) as AvgTripDistance\n",
							"   FROM nyctaxi.trip\n",
							"   WHERE TripDistanceMiles > 0 AND PassengerCount > 0\n",
							"   GROUP BY PassengerCount\n",
							"   ORDER BY PassengerCount\n",
							"\"\"\") \n",
							"display(df)\n",
							"df.write.saveAsTable(\"nyctaxi.passengercountstats\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Load data from a Spark table into a dedicated SQL pool table"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "scala"
							}
						},
						"source": [
							"%%spark\n",
							"val df = spark.sql(\"SELECT * FROM nyctaxi.passengercountstats\")\n",
							"df.write.sqlanalytics(\"SQLPOOL1.dbo.PassengerCountStats\", Constants.INTERNAL )"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/create table in spark')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "sparkpool1",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1",
						"state": {
							"e9dcaa45-907a-4226-9a0d-b884d8a3533e": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"startLon": -73.95500946044922,
												"startLat": 40.73378372192383,
												"rateCodeId": 1,
												"passengerCount": 1,
												"puMonth": 3,
												"tpepPickupDateTime": "2015-02-28T23:32:43.000Z",
												"mtaTax": 0.5,
												"improvementSurcharge": "0.3",
												"tpepDropoffDateTime": "2015-03-01T00:02:05.000Z",
												"paymentType": "2",
												"tripDistance": 8.66,
												"vendorID": "2",
												"endLon": -73.9688491821289,
												"totalAmount": 30.3,
												"storeAndFwdFlag": "N",
												"puYear": 2015,
												"extra": 0.5,
												"endLat": 40.67795181274414,
												"fareAmount": 29,
												"tipAmount": 0,
												"tollsAmount": 0
											},
											{
												"startLon": -73.9888916015625,
												"startLat": 40.758304595947266,
												"rateCodeId": 1,
												"passengerCount": 1,
												"puMonth": 3,
												"tpepPickupDateTime": "2015-02-28T23:41:32.000Z",
												"mtaTax": 0.5,
												"improvementSurcharge": "0.3",
												"tpepDropoffDateTime": "2015-03-01T00:08:59.000Z",
												"paymentType": "2",
												"tripDistance": 4.8,
												"vendorID": "1",
												"endLon": -73.91947174072266,
												"totalAmount": 21.3,
												"storeAndFwdFlag": "N",
												"puYear": 2015,
												"extra": 0.5,
												"endLat": 40.75845718383789,
												"fareAmount": 20,
												"tipAmount": 0,
												"tollsAmount": 0
											},
											{
												"startLon": -73.98031616210938,
												"startLat": 40.77208709716797,
												"rateCodeId": 1,
												"passengerCount": 1,
												"puMonth": 3,
												"tpepPickupDateTime": "2015-02-28T23:43:39.000Z",
												"mtaTax": 0.5,
												"improvementSurcharge": "0.3",
												"tpepDropoffDateTime": "2015-03-01T00:06:14.000Z",
												"paymentType": "2",
												"tripDistance": 3.96,
												"vendorID": "2",
												"endLon": -73.9767074584961,
												"totalAmount": 18.3,
												"storeAndFwdFlag": "N",
												"puYear": 2015,
												"extra": 0.5,
												"endLat": 40.73244857788086,
												"fareAmount": 17,
												"tipAmount": 0,
												"tollsAmount": 0
											},
											{
												"startLon": -73.99098205566406,
												"startLat": 40.73460388183594,
												"rateCodeId": 1,
												"passengerCount": 2,
												"puMonth": 3,
												"tpepPickupDateTime": "2015-02-28T23:22:27.000Z",
												"mtaTax": 0.5,
												"improvementSurcharge": "0.3",
												"tpepDropoffDateTime": "2015-03-01T00:07:12.000Z",
												"paymentType": "2",
												"tripDistance": 9.4,
												"vendorID": "1",
												"endLon": -73.91658782958984,
												"totalAmount": 36.3,
												"storeAndFwdFlag": "N",
												"puYear": 2015,
												"extra": 0.5,
												"endLat": 40.64944839477539,
												"fareAmount": 35,
												"tipAmount": 0,
												"tollsAmount": 0
											},
											{
												"startLon": -73.9870834350586,
												"startLat": 40.72951889038086,
												"rateCodeId": 1,
												"passengerCount": 1,
												"puMonth": 3,
												"tpepPickupDateTime": "2015-02-28T23:59:10.000Z",
												"mtaTax": 0.5,
												"improvementSurcharge": "0.3",
												"tpepDropoffDateTime": "2015-03-01T00:03:36.000Z",
												"paymentType": "1",
												"tripDistance": 0.7,
												"vendorID": "1",
												"endLon": -73.98332214355469,
												"totalAmount": 7.56,
												"storeAndFwdFlag": "N",
												"puYear": 2015,
												"extra": 0.5,
												"endLat": 40.72229766845703,
												"fareAmount": 5,
												"tipAmount": 1.26,
												"tollsAmount": 0
											},
											{
												"startLon": -73.96588897705078,
												"startLat": 40.71061706542969,
												"rateCodeId": 1,
												"passengerCount": 1,
												"puMonth": 3,
												"tpepPickupDateTime": "2015-02-28T23:52:38.000Z",
												"mtaTax": 0.5,
												"improvementSurcharge": "0.3",
												"tpepDropoffDateTime": "2015-03-01T00:35:54.000Z",
												"paymentType": "1",
												"tripDistance": 5.4,
												"vendorID": "2",
												"endLon": -73.98374938964844,
												"totalAmount": 35.16,
												"storeAndFwdFlag": "N",
												"puYear": 2015,
												"extra": 0.5,
												"endLat": 40.73839569091797,
												"fareAmount": 28,
												"tipAmount": 5.86,
												"tollsAmount": 0
											},
											{
												"startLon": -73.98614501953125,
												"startLat": 40.730979919433594,
												"rateCodeId": 1,
												"passengerCount": 2,
												"puMonth": 3,
												"tpepPickupDateTime": "2015-02-28T23:59:08.000Z",
												"mtaTax": 0.5,
												"improvementSurcharge": "0.3",
												"tpepDropoffDateTime": "2015-03-01T00:17:53.000Z",
												"paymentType": "1",
												"tripDistance": 4,
												"vendorID": "1",
												"endLon": -74.00798797607422,
												"totalAmount": 21.35,
												"storeAndFwdFlag": "N",
												"puYear": 2015,
												"extra": 0.5,
												"endLat": 40.704856872558594,
												"fareAmount": 16.5,
												"tipAmount": 3.55,
												"tollsAmount": 0
											},
											{
												"startLon": -73.95538330078125,
												"startLat": 40.78017044067383,
												"rateCodeId": 1,
												"passengerCount": 1,
												"puMonth": 3,
												"tpepPickupDateTime": "2015-02-28T10:47:27.000Z",
												"mtaTax": 0.5,
												"improvementSurcharge": "0.3",
												"tpepDropoffDateTime": "2015-03-01T10:45:00.000Z",
												"paymentType": "1",
												"tripDistance": 0.98,
												"vendorID": "2",
												"endLon": -73.96331787109375,
												"totalAmount": 8.4,
												"storeAndFwdFlag": "N",
												"puYear": 2015,
												"extra": 0,
												"endLat": 40.77479553222656,
												"fareAmount": 6.5,
												"tipAmount": 1.1,
												"tollsAmount": 0
											},
											{
												"startLon": -73.98506927490234,
												"startLat": 40.74848175048828,
												"rateCodeId": 1,
												"passengerCount": 2,
												"puMonth": 3,
												"tpepPickupDateTime": "2015-02-28T23:58:47.000Z",
												"mtaTax": 0.5,
												"improvementSurcharge": "0.3",
												"tpepDropoffDateTime": "2015-03-01T00:08:02.000Z",
												"paymentType": "2",
												"tripDistance": 1.6,
												"vendorID": "1",
												"endLon": -73.98119354248047,
												"totalAmount": 9.3,
												"storeAndFwdFlag": "N",
												"puYear": 2015,
												"extra": 0.5,
												"endLat": 40.764556884765625,
												"fareAmount": 8,
												"tipAmount": 0,
												"tollsAmount": 0
											},
											{
												"startLon": -73.98872375488281,
												"startLat": 40.731266021728516,
												"rateCodeId": 1,
												"passengerCount": 1,
												"puMonth": 3,
												"tpepPickupDateTime": "2015-02-28T03:07:05.000Z",
												"mtaTax": 0.5,
												"improvementSurcharge": "0.3",
												"tpepDropoffDateTime": "2015-03-01T00:00:00.000Z",
												"paymentType": "1",
												"tripDistance": 0.9,
												"vendorID": "2",
												"endLon": -74.00213623046875,
												"totalAmount": 9.36,
												"storeAndFwdFlag": "N",
												"puYear": 2015,
												"extra": 0.5,
												"endLat": 40.732994079589844,
												"fareAmount": 6.5,
												"tipAmount": 1.56,
												"tollsAmount": 0
											}
										],
										"schema": {
											"vendorID": "string",
											"tpepPickupDateTime": "int",
											"tpepDropoffDateTime": "int",
											"passengerCount": "int",
											"tripDistance": "double",
											"puLocationId": "string",
											"doLocationId": "string",
											"startLon": "double",
											"startLat": "double",
											"endLon": "double",
											"endLat": "double",
											"rateCodeId": "int",
											"storeAndFwdFlag": "string",
											"paymentType": "string",
											"fareAmount": "double",
											"extra": "double",
											"mtaTax": "double",
											"improvementSurcharge": "string",
											"tipAmount": "double",
											"tollsAmount": "double",
											"totalAmount": "double",
											"puYear": "int",
											"puMonth": "int"
										}
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"vendorID"
											],
											"seriesFieldKeys": [
												"tpepPickupDateTime"
											],
											"isStacked": false
										}
									}
								}
							}
						}
					},
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/6b067052-a87f-420c-a12f-4fc8bf8d00bb/resourceGroups/rg-synapse/providers/Microsoft.Synapse/workspaces/synapseworkspace1993/bigDataPools/sparkpool1",
						"name": "sparkpool1",
						"type": "Spark",
						"endpoint": "https://synapseworkspace1993.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool1",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"collapsed": false
						},
						"source": [
							"from azureml.opendatasets import NycTlcYellow\n",
							"\n",
							"data = NycTlcYellow()\n",
							"df = data.to_spark_dataframe()\n",
							"# Display 10 rows\n",
							"display(df.limit(10))"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"df.printSchema()"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"df.write.mode(\"overwrite\").saveAsTable(\"default.YourTableName\")"
						],
						"outputs": [],
						"execution_count": 4
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sqlpool1')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"restorePointInTime": "0001-01-01T00:00:00",
				"annotations": []
			},
			"dependsOn": [],
			"location": "eastus2"
		}
	]
}