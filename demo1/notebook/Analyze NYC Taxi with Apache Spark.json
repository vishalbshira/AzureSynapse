{
	"name": "Analyze NYC Taxi with Apache Spark",
	"properties": {
		"bigDataPool": {
			"referenceName": "sparkpool1",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/6b067052-a87f-420c-a12f-4fc8bf8d00bb/resourceGroups/rg-synapse/providers/Microsoft.Synapse/workspaces/synapseworkspace1993/bigDataPools/sparkpool1",
				"name": "sparkpool1",
				"type": "Spark",
				"endpoint": "https://synapseworkspace1993.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool1",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"source": [
					"## Load the NYC Taxi data into the Spark nyctaxi database\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "scala"
					}
				},
				"source": [
					"%%spark\n",
					"spark.sql(\"CREATE DATABASE IF NOT EXISTS nyctaxi\")\n",
					"val df = spark.read.sqlanalytics(\"SQLPOOL1.dbo.Trip\") \n",
					"df.write.mode(\"overwrite\").saveAsTable(\"nyctaxi.trip\")"
				],
				"execution_count": 1
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Analyze the NYC Taxi data using Spark and notebooks\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\n",
					"df = spark.sql(\"SELECT * FROM nyctaxi.trip\") \n",
					"display(df)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\n",
					"df = spark.sql(\"\"\"\n",
					"   SELECT PassengerCount,\n",
					"       SUM(TripDistanceMiles) as SumTripDistance,\n",
					"       AVG(TripDistanceMiles) as AvgTripDistance\n",
					"   FROM nyctaxi.trip\n",
					"   WHERE TripDistanceMiles > 0 AND PassengerCount > 0\n",
					"   GROUP BY PassengerCount\n",
					"   ORDER BY PassengerCount\n",
					"\"\"\") \n",
					"display(df)\n",
					"df.write.saveAsTable(\"nyctaxi.passengercountstats\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Load data from a Spark table into a dedicated SQL pool table"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "scala"
					}
				},
				"source": [
					"%%spark\n",
					"val df = spark.sql(\"SELECT * FROM nyctaxi.passengercountstats\")\n",
					"df.write.sqlanalytics(\"SQLPOOL1.dbo.PassengerCountStats\", Constants.INTERNAL )"
				],
				"execution_count": null
			}
		]
	}
}